[{"C:\\React\\nwitter\\src\\index.js":"1","C:\\React\\nwitter\\src\\components\\App.js":"2","C:\\React\\nwitter\\src\\components\\Router.js":"3","C:\\React\\nwitter\\src\\routes\\Auth.js":"4","C:\\React\\nwitter\\src\\routes\\Home.js":"5","C:\\React\\nwitter\\src\\fbase.js":"6","C:\\React\\nwitter\\src\\components\\Navigation.js":"7","C:\\React\\nwitter\\src\\routes\\Profile.js":"8","C:\\React\\nwitter\\src\\components\\Nweet.js":"9","C:\\React\\nwitter\\src\\components\\NweetFactory.js":"10","C:\\React\\nwitter\\src\\components\\AuthForm.js":"11"},{"size":233,"mtime":1608640708646,"results":"12","hashOfConfig":"13"},{"size":2111,"mtime":1608639329846,"results":"14","hashOfConfig":"13"},{"size":1446,"mtime":1608640688722,"results":"15","hashOfConfig":"13"},{"size":1420,"mtime":1608640819086,"results":"16","hashOfConfig":"13"},{"size":842,"mtime":1608640848500,"results":"17","hashOfConfig":"13"},{"size":745,"mtime":1608625192988,"results":"18","hashOfConfig":"13"},{"size":1159,"mtime":1608640304500,"results":"19","hashOfConfig":"13"},{"size":1967,"mtime":1608640972366,"results":"20","hashOfConfig":"13"},{"size":2373,"mtime":1608640467217,"results":"21","hashOfConfig":"13"},{"size":3124,"mtime":1608640630775,"results":"22","hashOfConfig":"13"},{"size":1795,"mtime":1608640223779,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"8qqt3d",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"C:\\React\\nwitter\\src\\index.js",[],["52","53"],"C:\\React\\nwitter\\src\\components\\App.js",["54"],"import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport fbase from \"fbase\";\nimport {authService} from \"fbase\";\n\nfunction App() {\n  \n  const [init,setInit] =useState(false);\n  const [userObj,setUserObj] =useState(null);\n  \n  useEffect(()=>{\n    authService.onAuthStateChanged((user)=>{\n      if(user){\n        //setUserObj(user); 전체 유저를 가져올경우 객체가 커진다.\n        setUserObj({\n          displayName:user.displayName,\n          uid:user.uid,\n          updateProfile: (args) => user.updateProfile(args)\n        })\n      }else{\n        setUserObj(null);\n      }\n      setInit(true);\n\n    });\n    //유저의 상태 변화를 감시 // 이렇게 하는 이유는 \n    //이렇게 하지 않으면  firebase가  다 로드 되기까지 기다려주질 않는다. 그래서 \n    // 계속  isLoggedIn이  null 상태가 된다.\n\n  },[]);\n  const refreshUser = () =>{\n    const user = authService.currentUser;\n    //setUserObj(authService.currentUser);\n    //이렇게 해주는 이유는  우리가 마이프로필 페이지에서 \n    // 정보를 수정하면  그 수정한 정보가 네비게이터에도 적용 되게 할려고\n    // 그런데  적용이 안되네??  이유는  authService.currentUser의 객체정보가 너무 커서\n    // 리엑트가   이 상태가 전 상태와 같은 지 다른 지 판단하기 헷갈린다. \n    // 그래서 첫번쨰 방법: object의 크기를 줄여준다.\n    setUserObj({\n      displayName:user.displayName,\n      uid:user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    })\n\n    //두번째 방법은  user전체를 받아오고  setUserObj(Object.assign({},user));\n    //이런식으로  빈객체에 user객체를 넣어 새로운 객체를 만들어서 리엑트가 인지하게 할 수 있다.\n    // 하지만  가끔 이상한 경우가 있음 첫번째 방법을 더 추천\n\n    \n  \n  }\n\n  \n  return (\n    <>\n     {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj}/> :\"Initializing...\"} \n    \n    </>\n  );\n}\n\nexport default App;\n","C:\\React\\nwitter\\src\\components\\Router.js",[],"C:\\React\\nwitter\\src\\routes\\Auth.js",[],"C:\\React\\nwitter\\src\\routes\\Home.js",[],"C:\\React\\nwitter\\src\\fbase.js",[],"C:\\React\\nwitter\\src\\components\\Navigation.js",[],"C:\\React\\nwitter\\src\\routes\\Profile.js",["55","56"],"import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst Profile = ({refreshUser,userObj})=>{\r\n    const history = useHistory();\r\n    const [newDisplayName,setNewDisplayName] = useState(userObj.displayName);\r\n     const onLogOutClick = ()=> {\r\n         authService.signOut();\r\n         history.push(\"/\");\r\n        \r\n        };\r\n\r\n\r\n    // const getMyNweets= async()=>{\r\n    //     const nweets = await dbService\r\n    //         .collection(\"nweets\")\r\n    //         .where(\"creatorId\",\"==\",userObj.uid)\r\n    //         .orderBy(\"createdAt\")\r\n    //         .get();\r\n    //         //처음 orderBy를 할경우 에러가 뜬다. 인덱스를 만들어 줘야 한다.\r\n    //     console.log(nweets.docs.map(doc => doc.data()));\r\n    // }    \r\n\r\n    // useEffect(()=>{\r\n    //     getMyNweets();\r\n    // },[])  // 시범 삼아 보여준 코드\r\n    const onChange = (event) =>{\r\n        const{ target :{value}} = event;\r\n        setNewDisplayName(value);\r\n    };\r\n    const onSubmit = async (event) =>{\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName){\r\n           await userObj.updateProfile({\r\n                displayName:newDisplayName\r\n            });\r\n            refreshUser();\r\n        }\r\n    };    \r\n\r\n    return( \r\n        <div className=\"container\">\r\n        <form onSubmit={onSubmit} className=\"profileForm\">\r\n            <input onChange={onChange} type=\"text\" autoFocus placeholder=\"Display name\" value={newDisplayName} className=\"formInput\"/>\r\n            <input\r\n            type=\"submit\"\r\n            value=\"Update Profile\"\r\n            className=\"formBtn\"\r\n            style={{\r\n                marginTop: 10,\r\n            }}\r\n        />\r\n        </form>\r\n        <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","C:\\React\\nwitter\\src\\components\\Nweet.js",["57"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet =({nweetObj ,isOwner }) => {\r\n    const [editing,setEditing]=useState(false);\r\n    const[newNweet,setNewNweet] =useState(nweetObj.text);\r\n    const onDeleteClick =async ()=>{\r\n        const ok =window.confirm(\"Are you sure you want to delete this nweet?\");\r\n       \r\n        if(ok){\r\n           await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n           await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n           //refFromURl은  url을 주면 reference를 얻을 수 있다. \r\n        }\r\n    };\r\n    const toggleEditing =()=>setEditing(prev=> !prev);\r\n    const onSubmit =async (event)=>{\r\n        event.preventDefault();\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text:newNweet,\r\n        });\r\n        setEditing(false);\r\n    }\r\n    \r\n    const onChange = (event)=>{\r\n        const {target:{value}}=event;\r\n        setNewNweet(value);\r\n\r\n    }\r\n\r\n\r\n\r\n return (\r\n    <div className=\"nweet\">\r\n       {\r\n           editing ? \r\n           <>\r\n             {isOwner && <> \r\n             <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n               <input onChange={onChange} type=\"text\" placeholder=\"Edit your nweet\" value={newNweet} required autoFocus className=\"formInput\"/>\r\n                <input type=\"submit\" value=\"Update Nweet\"  className=\"formBtn\" />   \r\n            </form> \r\n            <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n           </>}\r\n           </>\r\n           :\r\n           \r\n           <>\r\n           <h4 >{nweetObj.text}</h4>\r\n           {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl}/>}\r\n           { isOwner && (\r\n                <div class=\"nweet__actions\">\r\n                <span onClick={onDeleteClick}>\r\n                    <FontAwesomeIcon icon={faTrash} />\r\n                </span>\r\n                <span onClick={toggleEditing}>\r\n                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                </span>\r\n                </div>\r\n           )\r\n           }\r\n           </>   \r\n       }\r\n    </div>\r\n\r\n)\r\n\r\n\r\n\r\n}\r\n\r\nexport default Nweet;","C:\\React\\nwitter\\src\\components\\NweetFactory.js",["58"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({userObj}) =>{\r\n\r\n    const [nweet,setNweet] =useState(\"\");\r\n    const [attachment,setAttachment]=useState(\"\");\r\n\r\n    const onSubmit =async (event) =>{ // 먼저 사진이 있으면 올리고 그 URL을 받아서 그걸 nweet에 넣는다.\r\n        \r\n        if (nweet === \"\") {\r\n            return;\r\n          }\r\n        \r\n        event.preventDefault();\r\n        let attachmentUrl =\"\";\r\n        if(attachment !== \"\"){\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);        \r\n            const response = await attachmentRef.putString(attachment,\"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const nweetObj ={\r\n            text:nweet,\r\n            createdAt:Date.now(),\r\n            creatorId:userObj.uid,\r\n            attachmentUrl,\r\n        };\r\n       await dbService.collection(\"nweets\").add(nweetObj);\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n    const onChange =(event)=>{\r\n        const{target:{value}} =event;\r\n        setNweet(value);\r\n    }\r\n\r\n    const onFileChange =(event)=>{\r\n        const {target :{files}}= event;\r\n        const theFile =files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend=(finishedEvent)=>{\r\n            const {currentTarget : {result}} =finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n\r\n    const onClearAttachment =() =>setAttachment(\"\");\r\n\r\n\r\n    return (      \r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n            <input\r\n                className=\"factoryInput__input\"\r\n                value={nweet}\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                placeholder=\"What's on your mind?\"\r\n                maxLength={120}\r\n            />\r\n            <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n            </div>\r\n            <label for=\"attach-file\" className=\"factoryInput__label\">\r\n            <span>Add photos</span>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n        <input id=\"attach-file\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={onFileChange}\r\n            style={{\r\n            opacity: 0,\r\n        }} />\r\n       \r\n        {attachment &&  <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n            </div>    \r\n        }\r\n    </form>)\r\n\r\n}\r\n\r\nexport default NweetFactory;","C:\\React\\nwitter\\src\\components\\AuthForm.js",["59"],"import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm =() =>{\r\n    const [email,setEmail] =useState(\"\");\r\n    const [password,setPassword] =useState(\"\");\r\n    const [newAccount,setNewAccount] =useState(true);\r\n    const [error,setError]=useState(\"\");\r\n\r\n    const onChange =(event) =>{\r\n        const {target:{name,value}}=event;\r\n       \r\n        if(name === \"email\"){\r\n            setEmail(value)\r\n        }else if(name===\"password\"){\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit =async (event)=>{\r\n        event.preventDefault();\r\n        let data;\r\n        try{\r\n            if(newAccount){\r\n                 data = await authService.createUserWithEmailAndPassword(email,password);\r\n            }else{\r\n                 data = await authService.signInWithEmailAndPassword(email,password);  \r\n            }\r\n             \r\n        }catch(error){\r\n            setError(error.message);\r\n        }   \r\n    }\r\n\r\n    const toggleAccount =()=> setNewAccount(prev=> !prev);\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n                <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email}  onChange={onChange} className=\"authInput\"/>\r\n                <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} className=\"authInput\"/>\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\" } className=\"authInput authSubmit\"/>   \r\n            {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ? \"Sign in\" :\"Create Account\"}</span>\r\n         </>\r\n    )\r\n\r\n}\r\nexport default AuthForm;",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":13},{"ruleId":"64","severity":1,"message":"68","line":1,"column":23,"nodeType":"66","messageId":"67","endLine":1,"endColumn":32},{"ruleId":"64","severity":1,"message":"69","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":26},{"ruleId":"70","severity":1,"message":"71","line":54,"column":39,"nodeType":"72","endLine":54,"endColumn":74},{"ruleId":"70","severity":1,"message":"71","line":80,"column":11,"nodeType":"72","endLine":85,"endColumn":13},{"ruleId":"64","severity":1,"message":"73","line":26,"column":18,"nodeType":"66","messageId":"67","endLine":26,"endColumn":22},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'fbase' is defined but never used.","Identifier","unusedVar","'dbService' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]